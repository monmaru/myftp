// Code generated by protoc-gen-go. DO NOT EDIT.
// source: myftp.proto

package proto

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadStatus int32

const (
	UploadStatus_UNKNOWN UploadStatus = 0
	UploadStatus_OK      UploadStatus = 1
	UploadStatus_FAILED  UploadStatus = 2
)

var UploadStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "FAILED",
}

var UploadStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"FAILED":  2,
}

func (x UploadStatus) String() string {
	return proto.EnumName(UploadStatus_name, int32(x))
}

func (UploadStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_07d33c66d3c1a633, []int{0}
}

type UploadRequest struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07d33c66d3c1a633, []int{0}
}

func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UploadRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type UploadResponse struct {
	Message              string       `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Status               UploadStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=proto.UploadStatus" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07d33c66d3c1a633, []int{1}
}

func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadResponse) GetStatus() UploadStatus {
	if m != nil {
		return m.Status
	}
	return UploadStatus_UNKNOWN
}

func init() {
	proto.RegisterEnum("proto.UploadStatus", UploadStatus_name, UploadStatus_value)
	proto.RegisterType((*UploadRequest)(nil), "proto.UploadRequest")
	proto.RegisterType((*UploadResponse)(nil), "proto.UploadResponse")
}

func init() { proto.RegisterFile("myftp.proto", fileDescriptor_07d33c66d3c1a633) }

var fileDescriptor_07d33c66d3c1a633 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xad, 0x4c, 0x2b,
	0x29, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xae, 0x5c, 0xbc, 0xa1,
	0x05, 0x39, 0xf9, 0x89, 0x29, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec,
	0xce, 0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae,
	0x90, 0x14, 0x17, 0x87, 0x5b, 0x66, 0x4e, 0xaa, 0x5f, 0x62, 0x6e, 0xaa, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x9c, 0xaf, 0x14, 0xce, 0xc5, 0x07, 0x33, 0xa6, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0x15, 0x64, 0x8e, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0xd8, 0x1c, 0xce, 0x20, 0x18, 0x57,
	0x48, 0x9b, 0x8b, 0x2d, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x18, 0x6c, 0x0a, 0x9f, 0x91, 0x30, 0xc4,
	0x45, 0x7a, 0x10, 0x03, 0x20, 0x52, 0x41, 0x50, 0x25, 0x5a, 0xfa, 0x5c, 0x3c, 0xc8, 0xe2, 0x42,
	0xdc, 0x5c, 0xec, 0xa1, 0x7e, 0xde, 0x7e, 0xfe, 0xe1, 0x7e, 0x02, 0x0c, 0x42, 0x6c, 0x5c, 0x4c,
	0xfe, 0xde, 0x02, 0x8c, 0x42, 0x5c, 0x5c, 0x6c, 0x6e, 0x8e, 0x9e, 0x3e, 0xae, 0x2e, 0x02, 0x4c,
	0x46, 0x76, 0x5c, 0xcc, 0x6e, 0x25, 0x05, 0x42, 0xe6, 0x5c, 0x6c, 0x10, 0x7d, 0x42, 0x22, 0x28,
	0xc6, 0x43, 0xbd, 0x29, 0x25, 0x8a, 0x26, 0x0a, 0x71, 0xb5, 0x06, 0x63, 0x12, 0x1b, 0x58, 0xdc,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x42, 0x51, 0x9a, 0xa9, 0x2d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FtpClient is the client API for Ftp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FtpClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Ftp_UploadClient, error)
}

type ftpClient struct {
	cc *grpc.ClientConn
}

func NewFtpClient(cc *grpc.ClientConn) FtpClient {
	return &ftpClient{cc}
}

func (c *ftpClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Ftp_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ftp_serviceDesc.Streams[0], "/proto.Ftp/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &ftpUploadClient{stream}
	return x, nil
}

type Ftp_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type ftpUploadClient struct {
	grpc.ClientStream
}

func (x *ftpUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ftpUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FtpServer is the server API for Ftp service.
type FtpServer interface {
	Upload(Ftp_UploadServer) error
}

func RegisterFtpServer(s *grpc.Server, srv FtpServer) {
	s.RegisterService(&_Ftp_serviceDesc, srv)
}

func _Ftp_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FtpServer).Upload(&ftpUploadServer{stream})
}

type Ftp_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type ftpUploadServer struct {
	grpc.ServerStream
}

func (x *ftpUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ftpUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ftp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Ftp",
	HandlerType: (*FtpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Ftp_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "myftp.proto",
}
